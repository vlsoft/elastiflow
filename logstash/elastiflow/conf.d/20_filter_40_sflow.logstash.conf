#------------------------------------------------------------------------------
# Copyright (C)2020 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2020 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][dataset] == "sflow" {
    # Process sFlow flow sample events.
    if [sflow_type] == "flow_sample" or [sflow_type] == "expanded_flow_sample" {
      # Adjust value of host fields if flow records came from a proxy.
        if [agent_ip] {
          if [agent_ip] != [host][ip] {
            mutate {
              replace => {
                "[host][ip]" => "%{[agent_ip]}"
                "[host][name]" => "%{[agent_ip]}"
              }
            }
            if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "exporters" {
              dns {
                reverse => [ "[host][name]" ]
                action => "replace"
                nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
                hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
                hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
                failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
                failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
              }
            }
          }
          mutate {
            remove_field => [ "[agent_ip]" ]
          }
        }

      # Restructure common sFlow data into an object.
        mutate {
          rename => {
            #"agent_ip" => "[sflow][agent_ip]"
            #"flow_sequence_number" => "[sflow][flow_sequence_number]"
            #"header_size" => "[sflow][header_size]"
            #"ip_checksum" => "[sflow][ip_checksum]"
            #"ip_fragment_offset" => "[sflow][ip_fragment_offset]"
            #"ip_header_length" => "[sflow][ip_header_length]"
            #"ip_identification" => "[sflow][ip_identification]"
            #"ip_total_length" => "[sflow][ip_total_length]"
            #"padded" => "[sflow][padded]"
            #"sample_pool" => "[sflow][sample_pool]"
            #"sample_seq_number" => "[sflow][sample_seq_number]"
            #"sequence_number" => "[sflow][sequence_number]"
            #"sflow_version" => "[sflow][sflow_version]"
            #"size_header" => "[sflow][size_header]"
            #"stripped" => "[sflow][stripped]"
            #"tcp_ack_number" => "[sflow][tcp_ack_number]"
            #"tcp_checksum" => "[sflow][tcp_checksum]"
            #"tcp_header_length" => "[sflow][tcp_header_length]"
            #"tcp_is_ack" => "[sflow][tcp_is_ack]"
            #"tcp_is_cwr" => "[sflow][tcp_is_cwr]"
            #"tcp_is_ecn_echo" => "[sflow][tcp_is_ecn_echo]"
            #"tcp_is_fin" => "[sflow][tcp_is_fin]"
            #"tcp_is_nonce" => "[sflow][tcp_is_nonce]"
            #"tcp_is_push" => "[sflow][tcp_is_push]"
            #"tcp_is_reset" => "[sflow][tcp_is_reset]"
            #"tcp_is_syn" => "[sflow][tcp_is_syn]"
            #"tcp_is_urgent" => "[sflow][tcp_is_urgent]"
            #"tcp_reserved" => "[sflow][tcp_reserved]"
            #"tcp_seq_number" => "[sflow][tcp_seq_number]"
            #"udp_checksum" => "[sflow][udp_checksum]"
            #"udp_length" => "[sflow][udp_length]"
            #"uptime_in_ms" => "[sflow][uptime_in_ms]"
            "drops" => "[sflow][drops]"
            "dst_ip" => "[destination][ip]"
            "dst_mac" => "[sflow][dst_mac]"
            "dst_mask_len" => "[flow][dst_mask_len]"
            "dst_port" => "[destination][port]"
            "dst_priority" => "[sflow][dst_priority]"
            "dst_vlan" => "[sflow][dst_vlan]"
            "eth_dst" => "[sflow][eth_dst]"
            "eth_src" => "[sflow][eth_src]"
            "eth_type" => "[sflow][eth_type]"
            "frame_length" => "[sflow][frame_length]"
            "frame_length_times_sampling_rate" => "[network][bytes]"
            "input_interface" => "[flow][input_snmp]"
            "input_interface_format" => "[sflow][input_interface_format]"
            "input_interface_value" => "[flow][input_snmp]"
            "ip_address_next_hop_router" => "[flow][next_hop]"
            "ip_dscp" => "[sflow][ip_dscp]"
            "ip_ecn" => "[sflow][ip_ecn]"
            "ip_flags" => "[sflow][ip_flags]"
            "ip_next_header" => "[sflow][ip_next_header]"
            "ip_options" => "[sflow][ip_options]"
            "ip_packet_length" => "[sflow][ip_packet_length]"
            "ip_priority" => "[sflow][ip_priority]"
            "ip_protocol" => "[network][iana_number]"
            "ip_ttl" => "[sflow][ip_ttl]"
            "ip_type" => "[sflow][ip_type]"
            "ip_version" => "[network][type]"
            "output_interface" => "[flow][output_snmp]"
            "output_interface_format" => "[sflow][output_interface_format]"
            "output_interface_value" => "[flow][output_snmp]"
            "packet_length" => "[sflow][packet_length]"
            "protocol" => "[sflow][protocol]"
            "sample_length" => "[sflow][sample_length]"
            "sampling_rate" => "[flow][sampling_interval]"
            "sflow_type" => "[sflow][sflow_type]"
            "source_id_index" => "[sflow][source_id_index]"
            "source_id_type" => "[sflow][source_id_type]"
            "src_ip" => "[source][ip]"
            "src_mac" => "[sflow][src_mac]"
            "src_mask_len" => "[flow][src_mask_len]"
            "src_port" => "[source][port]"
            "src_priority" => "[sflow][src_priority]"
            "src_vlan" => "[sflow][src_vlan]"
            "sub_agent_id" => "[sflow][sub_agent_id]"
            "tcp_options" => "[sflow][tcp_options]"
            "tcp_urgent_pointer" => "[sflow][tcp_urgent_pointer]"
            "tcp_window_size" => "[sflow][tcp_window_size]"
            "vlan_cfi" => "[sflow][vlan_cfi]"
            "vlan_id" => "[sflow][vlan_id]"
            "vlan_priority" => "[sflow][vlan_priority]"
            "vlan_type" => "[sflow][vlan_type]"
          }
        }
        mutate {
          add_field => { "[source][bytes]" => "%{[network][bytes]}" }
        }

      # Set flow.tcp_flags
        ruby {
          code => "event.set('[flow][tcp_flags]', event.get('[tcp_is_fin]').to_i + (event.get('[tcp_is_syn]').to_i * 2) + (event.get('[tcp_is_reset]').to_i * 4) + (event.get('[tcp_is_push]').to_i * 8) + (event.get('[tcp_is_ack]').to_i * 16) + (event.get('[tcp_is_urgent]').to_i * 32) + (event.get('[tcp_is_ecn_echo]').to_i * 64) + (event.get('[tcp_is_cwr]').to_i * 128));"
        }

        mutate {
          convert => {
            "[network][iana_number]" => "integer"
            "[source][port]" => "integer"
            "[destination][port]" => "integer"
            "[network][bytes]" => "integer"
            "[source][bytes]" => "integer"
            "[flow][sampling_interval]" => "integer"
            "[flow][tcp_flags]" => "integer"
            "[flow][input_snmp]" => "integer"
            "[flow][output_snmp]" => "integer"
          }
          remove_field => [ "[tcp_is_fin]", "[tcp_is_syn]", "[tcp_is_reset]", "[tcp_is_push]", "[tcp_is_ack]", "[tcp_is_urgent]", "[tcp_is_ecn_echo]", "[tcp_is_cwr]", "[tcp_is_nonce]" ]
        }

      # Determine sample direction.
        if [sflow][source_id_type] == 0 {
          if [sflow][source_id_index] == [flow][input_snmp] {
            mutate {
              add_field => { "[flow][direction]" => "ingress" }
            }
          } else if [sflow][source_id_index] == [flow][output_snmp] {
            mutate {
              add_field => { "[flow][direction]" => "egress" }
            }
          } else {
            mutate {
              add_field => { "[flow][direction]" => "undetermined" }
            }
          }
        }

      # lookup source ID type to find the a value for source_id_type.
        if [sflow][source_id_type] {
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sflow_source_id_type.yml"
            field => "[sflow][source_id_type]"
            destination => "[sflow][source_id_type]"
            fallback => "UNKNOWN(%{[sflow][source_id_type]})"
            override => true
            refresh_behaviour => "replace"
          }
        }

      # Populate normalized ElastiFlow fields with simple mapping from sFlow flow sample.
        if [network][type] == "4" or [network][type] == "6" {
          mutate {
            replace => { "[network][type]" => "ipv%{[network][type]}" }
          }
        } else {
          # Did not recognize IP version.
          mutate {
            add_tag => [ "__sflow_ip_version_not_recognized" ]
            replace => { "[network][type]" => "undetermined" }
          }
        }

      # Estimate packets from sampling rate.
        if [flow][sampling_interval] {
          mutate {
            add_field => { "[network][packets]" => "%{[flow][sampling_interval]}" }
          }
          mutate {
            convert => { "[network][packets]" => "integer" }
          }
        }

      # Populate normalized ElastiFlow fields with source and destination MAC addresses if available.
        if [sflow][eth_src] {
          mutate {
            rename => { "[sflow][eth_src]" => "[source][mac]" }
          }
        } else if [sflow][src_mac] {
          mutate {
            rename => { "[sflow][src_mac]" => "[source][mac]" }
          }
        }
        if [sflow][eth_dst] {
          mutate {
            rename => { "[sflow][eth_dst]" => "[destination][mac]" }
          }
        } else if [sflow][dst_mac] {
          mutate {
            rename => { "[sflow][dst_mac]" => "[destination][mac]" }
          }
        }

      # Populate normalized ElastiFlow fields with source VLAN if available.
        if [sflow][vlan_id] {
          mutate {
            rename => { "[sflow][vlan_id]" => "[flow][vlan]" }
          }
          if [flow][vlan] == [sflow][src_vlan] {
            mutate {
              remove_field => [ "[sflow][src_vlan]" ]
            }
          }
          if [flow][vlan] == [sflow][dst_vlan] {
            mutate {
              remove_field => [ "[sflow][dst_vlan]" ]
            }
          }
        } else if [sflow][src_vlan] {
          mutate {
            rename => { "[sflow][src_vlan]" => "[flow][vlan]" }
          }
          if [flow][vlan] == [sflow][dst_vlan] {
            mutate {
              remove_field => [ "[sflow][dst_vlan]" ]
            }
          }
        } else if [sflow][dst_vlan] {
          mutate {
            rename => { "[sflow][dst_vlan]" => "[flow][vlan]" }
          }
        }

      # Populate normalized ElastiFlow fields with TOS value if available.
        if [sflow][ip_dscp] {
          mutate {
            rename => { "[sflow][ip_dscp]" => "[flow][tos]" }
          }
        } else if [sflow][dst_priority] {
          mutate {
            rename => { "[sflow][dst_priority]" => "[flow][tos]" }
          }
          if [flow][tos] == [sflow][src_priority] {
            mutate {
              remove_field => [ "[sflow][src_priority]" ]
            }
          }
        } else if [sflow][src_priority] {
          mutate {
            rename => { "[sflow][src_priority]" => "[flow][tos]" }
          }
        } else if [sflow][ip_priority] {
          mutate {
            rename => { "[sflow][ip_priority]" => "[flow][tos]" }
          }
        }

      if [sflow][protocol] {
        translate {
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sflow_header_protocol.yml"
          field => "[sflow][protocol]"
          destination => "[sflow][protocol]"
          fallback => "UNKNOWN(%{[sflow][protocol]})"
          override => true
          refresh_behaviour => "replace"
        }
      }
    } else {
      # sFlow counter samples are dropped.
      drop { }
    }
  }
}
