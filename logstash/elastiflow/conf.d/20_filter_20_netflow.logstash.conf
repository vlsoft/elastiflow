#------------------------------------------------------------------------------
# Copyright (C)2020 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2020 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][dataset] == "netflow" {
    # If flows are sent through a proxy that adds exporterIPv4Address or exporterIPv6Address, then reset node.ipaddr and node.hostname.
      if [netflow][exporterIPv4Address] or [netflow][exporterIPv6Address] {
        if [netflow][exporterIPv4Address] {
          mutate {
            replace => {
              "[host][ip]" => "%{[netflow][exporterIPv4Address]}"
              "[host][name]" => "%{[netflow][exporterIPv4Address]}"
            }
          }
          mutate {
            remove_field => [ "[netflow][exporterIPv4Address]" ]
          }
        } else if [netflow][exporterIPv6Address] {
          mutate {
            replace => {
              "[host][ip]" => "%{[netflow][exporterIPv6Address]}"
              "[host][name]" => "%{[netflow][exporterIPv6Address]}"
            }
          }
          mutate {
            remove_field => [ "[netflow][exporterIPv6Address]" ]
          }
        }

        if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "exporters" {
          dns {
            reverse => [ "[host][name]" ]
            action => "replace"
            nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
            hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
            hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
            failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
            failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
          }
        }
      }
    
    # Set ECS event.start, event.end and event.duration.
      if [netflow][first_switched] {
        date {
          locale => "en"
          match => [ "[netflow][first_switched]", "ISO8601" ]
          timezone => "${ELASTIFLOW_NETFLOW_TZ:UTC}"
          target => "[event][start]"
        }
        mutate {
          remove_field => [ "[netflow][first_switched]" ]
        }
      }

      if [netflow][last_switched] {
        date {
          locale => "en"
          match => [ "[netflow][last_switched]", "ISO8601" ]
          timezone => "${ELASTIFLOW_NETFLOW_TZ:UTC}"
          target => "[event][end]"
        }
        mutate {
          remove_field => [ "[netflow][last_switched]" ]
        }
      }

      if [event][start] and [event][end] {
        ruby {
          code => "event.set( '[event][duration]', event.get('[event][end]').to_i - event.get('[event][start]').to_i )"
        }
      }

    # Populate normalized ElastiFlow fields common to both Netflow v5 and Netflow v9.
      mutate {
        rename => {
          "[netflow][sampling_interval]" => "[flow][sampling_interval]"
          "[netflow][input_snmp]" => "[flow][input_snmp]"
          "[netflow][output_snmp]" => "[flow][output_snmp]"
          "[netflow][protocol]" => "[network][iana_number]"
          "[netflow][tcp_flags]" => "[flow][tcp_flags]"
        }
      }
      mutate {
        convert => {
          "[network][iana_number]" => "integer"
          "[flow][sampling_interval]" => "integer"
          "[flow][tcp_flags]" => "integer"
          "[flow][input_snmp]" => "integer"
          "[flow][output_snmp]" => "integer"
        }
      }

    #--------------------
    # The field names for Netflow v5 and v9 differ. We need to normalize to a
    # common data model so that we can work with the resulting events in a common manner.
    #--------------------

    # Process Netflow v5 events.
    if [netflow][version] == 5 {
      # Netflow v5 supports ONLY ingress flows and IPv4.
        mutate {
          add_field => {
            "[flow][direction]" => "ingress"
            "[network][type]" => "ipv4"
          }
        }

      # Populate normalized ElastiFlow fields with Netflow v5 data.
        mutate {
          rename => {
            "[netflow][ipv4_src_addr]" => "[source][ip]"
            "[netflow][src_mask]" => "[flow][src_mask_len]"
            "[netflow][l4_src_port]" => "[source][port]"
            "[netflow][ipv4_dst_addr]" => "[destination][ip]"
            "[netflow][dst_mask]" => "[flow][dst_mask_len]"
            "[netflow][l4_dst_port]" => "[destination][port]"
            "[netflow][ipv4_next_hop]" => "[flow][next_hop]"
            "[netflow][src_tos]" => "[flow][tos]"
          }
        }

        if [netflow][in_bytes] {
          mutate { 
            add_field => {
              "[network][bytes]" => "%{[netflow][in_bytes]}"
              "[source][bytes]" => "%{[netflow][in_bytes]}"
            }
          }
        }

        if [netflow][in_pkts] {
          mutate { 
            add_field => {
              "[network][packets]" => "%{[netflow][in_pkts]}"
              "[source][packets]" => "%{[netflow][in_pkts]}"
            }
          }
        }
        
        mutate {
          convert => {
            "[source][port]" => "integer"
            "[destination][port]" => "integer"
            "[network][bytes]" => "integer"
            "[source][bytes]" => "integer"
            "[network][packets]" => "integer"
            "[source][packets]" => "integer"
          }
        }
    }
    
    # Process Netflow v9 events.
    else if [netflow][version] == 9 {
      # Set IP version.
        if [netflow][ip_protocol_version] {
          mutate {
            add_field => { "[network][type]" => "ipv%{[netflow][ip_protocol_version]}" }
          }
          mutate {
            remove_field => [ "[netflow][ip_protocol_version]" ]
          }
        }

      # Populate normalized ElastiFlow fields with simple mappings
        mutate {
          rename => {
            "[netflow][bgpValidityState]" => "[flow][bgp_valid_state]"
            "[netflow][xlate_src_port]" => "[source][nat][port]"
            "[netflow][xlate_dst_port]" => "[destination][nat][port]"
            "[netflow][direction]" => "[flow][direction]"
            "[netflow][staMacAddress]" => "[flow][wifi_sta_mac]"
            "[netflow][wlanSSID]" => "[flow][wifi_ssid]"
            "[netflow][wtpMacAddress]" => "[flow][wifi_wtp_mac]"
          }
          convert => {
            "[netflow][biflowDirection]" => "integer"
          }
        }

      # Populate normalized ElastiFlow fields with IPv4 or IPv6 specific fields.
        if [netflow][ipv4_src_addr] or [netflow][ipv4_dst_addr] or [netflow][staIPv4Address] {
          # Looks like an IPv4 flow.
          if ![network][type] {
            mutate {
              add_field => { "[network][type]" => "ipv4" }
            }
          }

          mutate {
            rename => {
              "[netflow][ipv4_src_addr]" => "[source][ip]"
              "[netflow][xlate_src_addr_ipv4]" => "[source][nat][ip]"
              "[netflow][src_mask]" => "[flow][src_mask_len]"
              "[netflow][ipv4_dst_addr]" => "[destination][ip]"
              "[netflow][xlate_dst_addr_ipv4]" => "[destination][nat][ip]"
              "[netflow][dst_mask]" => "[flow][dst_mask_len]"
              "[netflow][ipv4_next_hop]" => "[flow][next_hop]"
              "[netflow][bgp_ipv4_next_hop]" => "[flow][bgp_next_hop]"
              "[netflow][staIPv4Address]" => "[flow][wifi_sta_addr]"
            }
          }
        } else if [netflow][ipv6_src_addr] or [netflow][ipv6_dst_addr] or [netflow][staIPv6Address] {
          # Looks like an IPv6 flow.
          if ![network][type] {
            mutate {
              add_field => { "[network][type]" => "ipv6" }
            }
          }

          mutate {
            rename => {
              "[netflow][ipv6_src_addr]" => "[source][ip]"
              "[netflow][xlate_src_addr_ipv6]" => "[source][nat][ip]"
              "[netflow][ipv6_src_mask]" => "[flow][src_mask_len]"
              "[netflow][ipv6_dst_addr]" => "[destination][ip]"
              "[netflow][xlate_dst_addr_ipv6]" => "[destination][nat][ip]"
              "[netflow][ipv6_dst_mask]" => "[flow][dst_mask_len]"
              "[netflow][ipv6_next_hop]" => "[flow][next_hop]"
              "[netflow][bgp_ipv6_next_hop]" => "[flow][bgp_next_hop]"
              "[netflow][staIPv6Address]" => "[flow][wifi_sta_addr]"
            }
          }
        } else if [netflow][cisco_avc_client_ipv4_addr] or [netflow][cisco_avc_server_ipv4_addr] {
          # Looks like a Cisco AVC IPv4 flow.
          if ![network][type] {
            mutate {
              add_field => { "[network][type]" => "ipv4" }
            }
          }

          if [netflow][biflowDirection] == 1 {
            mutate {
              rename => {
                "[netflow][cisco_avc_client_ipv4_addr]" => "[source][ip]"
                "[netflow][cisco_avc_server_ipv4_addr]" => "[destination][ip]"
                "[netflow][cisco_avc_server_l4_port]" => "[destination][port]"
              }
              add_field => { "[@metadata][isServer]" => "dst" }
            }
          } else if [netflow][biflowDirection] == 2 {
            mutate {
              rename => {
                "[netflow][cisco_avc_client_ipv4_addr]" => "[destination][ip]"
                "[netflow][cisco_avc_server_ipv4_addr]" => "[source][ip]"
                "[netflow][cisco_avc_server_l4_port]" => "[source][port]"
              }
              add_field => { "[@metadata][isServer]" => "src" }
            }
          }
        } else if [netflow][cisco_avc_client_ipv6_addr] or [netflow][cisco_avc_server_ipv6_addr] {
          # Looks like a Cisco AVC IPv6 flow.
          if ![network][type] {
            mutate {
              add_field => { "[network][type]" => "ipv6" }
            }
          }

          if [netflow][biflowDirection] == 1 {
            mutate {
              rename => {
                "[netflow][cisco_avc_client_ipv6_addr]" => "[source][ip]"
                "[netflow][cisco_avc_server_ipv6_addr]" => "[destination][ip]"
                "[netflow][cisco_avc_server_l4_port]" => "[destination][port]"
              }
              add_field => { "[@metadata][isServer]" => "dst" }
            }
          } else if [netflow][biflowDirection] == 2 {
            mutate {
              rename => {
                "[netflow][cisco_avc_client_ipv6_addr]" => "[destination][ip]"
                "[netflow][cisco_avc_server_ipv6_addr]" => "[source][ip]"
                "[netflow][cisco_avc_server_l4_port]" => "[source][port]"
              }
              add_field => { "[@metadata][isServer]" => "src" }
            }
          }
        } else {
          # Did not recognize IP version.
          mutate {
            add_tag => [ "__netflow_ip_version_not_recognized" ]
            replace => { "[network][type]" => "undetermined" }
          }
        }

        if [netflow][biflowDirection] {
          translate {
            dictionary => {
              "1" => "dst"
              "2" => "src"
            }
            field => "[netflow][biflowDirection]"
            destination => "[@metadata][isServer]"
            override => true
          }
        }

      # Populate source.ip from flow.wifi_sta_addr if not present
        if ![source][ip] and [flow][wifi_sta_addr] {
          mutate {
            add_field => { "[source][ip]" => "%{[flow][wifi_sta_addr]}" }
          }
        }
      
      # Populate normalized ElastiFlow fields with flow directiom (ingress/egress).
        if [flow][direction] {
          translate {
            dictionary => {
              "0" => "ingress"
              "1" => "egress"
            }
            field => "[flow][direction]"
            destination => "[flow][direction]"
            override => true
            fallback => "undetermined"
          }
        } else {
          mutate {
            add_field => { "[flow][direction]" => "unspecified" }
          }
        }

      # Populate normalized ElastiFlow fields with source protocol port.
        if [netflow][l4_src_port] {
          mutate {
            rename => { "[netflow][l4_src_port]" => "[source][port]" }
          }
        } else if [netflow][tcp_src_port] {
          mutate {
            rename => { "[netflow][tcp_src_port]" => "[source][port]" }
          }
        } else if [netflow][udp_src_port] {
          mutate {
            rename => { "[netflow][udp_src_port]" => "[source][port]" }
          }
        }
        if [source][port] {
          mutate {
            convert => { "[source][port]" => "integer" }
          }
        }

      # Populate normalized ElastiFlow fields with destination protocol port.
        if [netflow][l4_dst_port] {
          mutate {
            rename => { "[netflow][l4_dst_port]" => "[destination][port]" }
          }
        } else if [netflow][tcp_dst_port] {
          mutate {
            rename => { "[netflow][tcp_dst_port]" => "[destination][port]" }
          }
        } else if [netflow][udp_src_port] {
          mutate {
            rename => { "[netflow][udp_dst_port]" => "[destination][port]" }
          }
        }
        if [destination][port] {
          mutate {
            convert => { "[destination][port]" => "integer" }
          }
        }

      # Populate normalized ElastiFlow fields with bytes transferred in the flow.
        if [netflow][in_bytes] {
          mutate {
            replace => {
              "[network][bytes]" => "%{[netflow][in_bytes]}"
              "[source][bytes]" => "%{[netflow][in_bytes]}"
            }
          }
        } else if [netflow][out_bytes] {
          mutate {
            replace => {
              "[network][bytes]" => "%{[netflow][out_bytes]}"
              "[source][bytes]" => "%{[netflow][out_bytes]}"
            }
          }
        } else if [netflow][in_permanent_bytes] {
          mutate {
            replace => {
              "[network][bytes]" => "%{[netflow][in_permanent_bytes]}"
              "[source][bytes]" => "%{[netflow][in_permanent_bytes]}"
            }
          }
        } else if [netflow][initiatorOctets] {
          if [netflow][responderOctets] {
            if [@metadata][isServer] == "src" {
              ruby {
                code => "
                  event.set( '[network][bytes]', event.get('[netflow][initiatorOctets]').to_i + event.get('[netflow][responderOctets]').to_i )
                  event.set( '[source][bytes]', event.get('[netflow][responderOctets]').to_i )
                  event.set( '[destination][bytes]', event.get('[netflow][initiatorOctets]').to_i )
                "
              }
            } else {
              ruby {
                code => "
                  event.set( '[network][bytes]', event.get('[netflow][initiatorOctets]').to_i + event.get('[netflow][responderOctets]').to_i )
                  event.set( '[source][bytes]', event.get('[netflow][initiatorOctets]').to_i )
                  event.set( '[destination][bytes]', event.get('[netflow][responderOctets]').to_i )
                "
              }
            }
          } else {
            if [@metadata][isServer] == "src" {
              mutate {
                replace => {
                  "[network][bytes]" => "%{[netflow][initiatorOctets]}"
                  "[destination][bytes]" => "%{[netflow][initiatorOctets]}"
                }
              }
            } else {
              mutate {
                replace => {
                  "[network][bytes]" => "%{[netflow][initiatorOctets]}"
                  "[source][bytes]" => "%{[netflow][initiatorOctets]}"
                }
              }
            }
          }
        } else if [netflow][responderOctets] {
          if [@metadata][isServer] == "src" {
            mutate {
              replace => {
                "[network][bytes]" => "%{[netflow][responderOctets]}"
                "[source][bytes]" => "%{[netflow][responderOctets]}"
              }
            }
          } else {
            mutate {
              replace => {
                "[network][bytes]" => "%{[netflow][responderOctets]}"
                "[destination][bytes]" => "%{[netflow][responderOctets]}"
              }
            }
          }
        } else if [netflow][cisco_avc_client_bytes] {
          if [netflow][cisco_avc_server_bytes] {
            if [@metadata][isServer] == "src" {
              ruby {
                code => "
                  event.set( '[network][bytes]', event.get('[netflow][cisco_avc_client_bytes]').to_i + event.get('[netflow][cisco_avc_server_bytes]').to_i )
                  event.set( '[source][bytes]', event.get('[netflow][cisco_avc_server_bytes]').to_i )
                  event.set( '[destination][bytes]', event.get('[netflow][cisco_avc_client_bytes]').to_i )
                "
              }
            } else {
              ruby {
                code => "
                  event.set( '[network][bytes]', event.get('[netflow][cisco_avc_client_bytes]').to_i + event.get('[netflow][cisco_avc_server_bytes]').to_i )
                  event.set( '[source][bytes]', event.get('[netflow][cisco_avc_client_bytes]').to_i )
                  event.set( '[destination][bytes]', event.get('[netflow][cisco_avc_server_bytes]').to_i )
                "
              }
            }
          } else {
            if [@metadata][isServer] == "src" {
              mutate {
                replace => {
                  "[network][bytes]" => "%{[netflow][cisco_avc_client_bytes]}"
                  "[destination][bytes]" => "%{[netflow][cisco_avc_client_bytes]}"
                }
              }
            } else {
              mutate {
                replace => {
                  "[network][bytes]" => "%{[netflow][cisco_avc_client_bytes]}"
                  "[source][bytes]" => "%{[netflow][cisco_avc_client_bytes]}"
                }
              }
            }
          }
        } else if [netflow][cisco_avc_server_bytes] {
          if [@metadata][isServer] == "src" {
            mutate {
              replace => {
                "[network][bytes]" => "%{[netflow][cisco_avc_server_bytes]}"
                "[source][bytes]" => "%{[netflow][cisco_avc_server_bytes]}"
              }
            }
          } else {
            mutate {
              replace => {
                "[network][bytes]" => "%{[netflow][cisco_avc_server_bytes]}"
                "[destination][bytes]" => "%{[netflow][cisco_avc_server_bytes]}"
              }
            }
          }
        }
        if [network][bytes] {
          mutate {
            convert => {
              "[network][bytes]" => "integer"
              "[source][bytes]" => "integer"
              "[destination][bytes]" => "integer"
            }
          }
        }
      
      # Populate normalized ElastiFlow fields with packets transferred in the flow.
        if [netflow][in_pkts] {
          mutate {
            replace => {
              "[network][packets]" => "%{[netflow][in_pkts]}"
              "[source][packets]" => "%{[netflow][in_pkts]}"
            }
          }
        } else if [netflow][out_pkts] {
          mutate {
            replace => {
              "[network][packets]" => "%{[netflow][out_pkts]}"
              "[source][packets]" => "%{[netflow][out_pkts]}"
            }
          }
        } else if [netflow][in_permanent_pkts] {
          mutate {
            replace => {
              "[network][packets]" => "%{[netflow][in_permanent_pkts]}"
              "[source][packets]" => "%{[netflow][in_permanent_pkts]}"
            }
          }
        } else if [netflow][initiatorPackets] {
          if [netflow][responderPackets] {
            if [@metadata][isServer] == "src" {
              ruby {
                code => "
                  event.set( '[network][packets]', event.get('[netflow][initiatorPackets]').to_i + event.get('[netflow][responderPackets]').to_i )
                  event.set( '[source][packets]', event.get('[netflow][responderPackets]').to_i )
                  event.set( '[destination][packets]', event.get('[netflow][initiatorPackets]').to_i )
                "
              }
            } else {
              ruby {
                code => "
                  event.set( '[network][packets]', event.get('[netflow][initiatorPackets]').to_i + event.get('[netflow][responderPackets]').to_i )
                  event.set( '[source][packets]', event.get('[netflow][initiatorPackets]').to_i )
                  event.set( '[destination][packets]', event.get('[netflow][responderPackets]').to_i )
                "
              }
            }
          } else {
            if [@metadata][isServer] == "src" {
              mutate {
                replace => {
                  "[network][packets]" => "%{[netflow][initiatorPackets]}"
                  "[destination][packets]" => "%{[netflow][initiatorPackets]}"
                }
              }
            } else {
              mutate {
                replace => {
                  "[network][packets]" => "%{[netflow][initiatorPackets]}"
                  "[source][packets]" => "%{[netflow][initiatorPackets]}"
                }
              }
            }
          }
        } else if [netflow][responderPackets] {
          if [@metadata][isServer] == "src" {
            mutate {
              replace => {
                "[network][packets]" => "%{[netflow][responderPackets]}"
                "[source][packets]" => "%{[netflow][responderPackets]}"
              }
            }
          } else {
            mutate {
              replace => {
                "[network][packets]" => "%{[netflow][responderPackets]}"
                "[destination][packets]" => "%{[netflow][responderPackets]}"
              }
            }
          }
        }
        if [network][packets] {
          mutate {
            convert => {
              "[network][packets]" => "integer"
              "[source][packets]" => "integer"
              "[destination][packets]" => "integer"
            }
          }
        }

      # Populate normalized ElastiFlow fields with source and destination MAC addresses if available.
        if [netflow][in_src_mac] {
          mutate {
            rename => { "[netflow][in_src_mac]" => "[source][mac]" }
          }
        } else if [netflow][out_src_mac] {
          mutate {
            rename => { "[netflow][out_src_mac]" => "[source][mac]" }
          }
        }
        if [netflow][in_dst_mac] {
          mutate {
            rename => { "[netflow][in_dst_mac]" => "[destination][mac]" }
          }
        } else if [netflow][out_dst_mac] {
          mutate {
            rename => { "[netflow][out_dst_mac]" => "[destination][mac]" }
          }
        }

      # Populate normalized ElastiFlow for VLAN if available.
        if [netflow][src_vlan] {
          mutate {
            rename => { "[netflow][src_vlan]" => "[flow][vlan]" }
          }
          if [flow][vlan] == [netflow][dst_vlan] {
            mutate {
              remove_field => [ "[netflow][dst_vlan]" ]
            }
          }
        } else if [netflow][dst_vlan] {
          mutate {
            rename => { "[netflow][dst_vlan]" => "[flow][vlan]" }
          }
        }

      # Populate normalized ElastiFlow fields for ToS if available.
        if [netflow][src_tos] {
          mutate {
            rename => { "[netflow][src_tos]" => "[flow][tos]" }
          }
          if [flow][tos] == [netflow][dst_tos] {
            mutate {
              remove_field => [ "[netflow][dst_tos]" ]
            }
          }
        } else if [netflow][dst_tos] {
          mutate {
            rename => { "[netflow][dst_tos]" => "[flow][tos]" }
          }
        }
      
      # Populate normalized ElastiFlow fields for applications if available.
        if [netflow][app_name] {
          mutate {
            rename => { "[netflow][app_name]" => "[network][application]" }
            remove_field => [ "[netflow][app_id]" ]
          }
        } else if [netflow][app_id] {
          if [netflow][app_id] =~ /^.*:[0-9]+$/ {
            mutate {
              gsub => [ "[netflow][app_id]", ":", ".." ]
            }
          }

          if [netflow][app_id] != "0..0" {
            translate {
              dictionary_path => "${ELASTIFLOW_USER_SETTINGS_PATH:/etc/logstash/elastiflow/user_settings}/app_id.srctype.yml"
              field => "[host][ip]"
              destination => "[@metadata][appid_srctype]"
              fallback => "${ELASTIFLOW_DEFAULT_APPID_SRCTYPE:__UNKNOWN}"
              refresh_behaviour => "replace"
            }

            if [@metadata][appid_srctype] == "fortinet" {
              if [netflow][app_id] =~ /^[0-9]+\.\.[0-9]+\.\.[0-9]+$/ {
                mutate {
                  gsub => [ "[netflow][app_id]", "[0-9]+\.\.[0-9]+\.\.", "0.." ]
                }
              }
            }

            if [@metadata][appid_srctype] != "__UNKNOWN" {
              mutate {
                add_field => { "[@metadata][appid_key]" => "%{[@metadata][appid_srctype]}__%{[netflow][app_id]}" }
              }
              translate {
                dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/app_id.yml"
                field => "[@metadata][appid_key]"
                destination => "[network][application]"
                fallback => "%{[netflow][app_id]}"
                refresh_behaviour => "replace"
              }
              mutate {
                remove_field => [ "[netflow][app_id]" ]
              }
            } else {
              mutate {
                rename => { "[netflow][app_id]" => "[network][application]" }
              }
            }
          } else {
            mutate {
              remove_field => [ "[netflow][app_id]" ]
            }
          }
        } else if [netflow][ntop_l7_proto_name] {
          mutate {
            rename => { "[netflow][ntop_l7_proto_name]" => "[network][application]" }
          }
        } else if [netflow][pan_app] {
          mutate {
            rename => { "[netflow][pan_app]" => "[network][application]" }
          }
        }
      
      # Lookup Riverbed-specific fields if present.
        if [netflow][riverbed_fe_type] {
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/riverbed_fe_type.yml"
            field => "[netflow][riverbed_fe_type]"
            destination => "[netflow][riverbed_fe_type]"
            override => true
            fallback => "undefined (%{[netflow][riverbed_fe_type]})"
            refresh_behaviour => "replace"
          }
        }
        if [netflow][riverbed_passthru_reason] {
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/riverbed_passthru_reason.yml"
            field => "[netflow][riverbed_passthru_reason]"
            destination => "[netflow][riverbed_passthru_reason]"
            override => true
            fallback => "undefined (%{[netflow][riverbed_passthru_reason]})"
            refresh_behaviour => "replace"
          }
        }
        if [netflow][riverbed_wan_visibility] {
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/riverbed_wan_visibility.yml"
            field => "[netflow][riverbed_wan_visibility]"
            destination => "[netflow][riverbed_wan_visibility]"
            override => true
            fallback => "undefined (%{[netflow][riverbed_wan_visibility]})"
            refresh_behaviour => "replace"
          }
        }
        if [netflow][riverbed_cfe_tcp_port] {
          mutate {
            add_field => { "[@metadata][cfe_port_key]" => "6:%{[netflow][riverbed_cfe_tcp_port]}" }
          }
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names.yml"
            field => "[@metadata][cfe_port_key]"
            destination => "[netflow][riverbed_cfe_tcp_port_name]"
            fallback => "TCP/%{[netflow][riverbed_cfe_tcp_port]}"
            refresh_behaviour => "replace"
          }
        }
        if [netflow][riverbed_outer_tcp_port] {
          mutate {
            add_field => { "[@metadata][outer_port_key]" => "6:%{[netflow][riverbed_outer_tcp_port]}" }
          }
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names.yml"
            field => "[@metadata][outer_port_key]"
            destination => "[netflow][riverbed_outer_tcp_port_name]"
            fallback => "TCP/%{[netflow][riverbed_outer_tcp_port]}"
            refresh_behaviour => "replace"
          }
        }
        if [netflow][riverbed_sfe_tcp_port] {
          mutate {
            add_field => { "[@metadata][sfe_port_key]" => "6:%{[netflow][riverbed_sfe_tcp_port]}" }
          }
          translate {
            dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/iana_service_names.yml"
            field => "[@metadata][sfe_port_key]"
            destination => "[netflow][riverbed_sfe_tcp_port_name]"
            fallback => "TCP/%{[netflow][riverbed_sfe_tcp_port]}"
            refresh_behaviour => "replace"
          }
        }
    }

    # Netflow version was not recognized.
      else {
        mutate {
          add_tag => [ "__netflow_version_not_recognized" ]
        }
      }

    # If sampled Netflow, adjust Bytes and Packets accordingly.
      # Workaround for sampled flows when the sampling interval is not set (e.g. from Cisco IOS XR or some Huawei devices)
      if ![flow][sampling_interval] {
        translate {
          dictionary_path => "${ELASTIFLOW_USER_SETTINGS_PATH:/etc/logstash/elastiflow/user_settings}/sampling_interval.yml"
          field => "[host][ip]"
          destination => "[flow][sampling_interval]"
          fallback => "0"
          refresh_behaviour => "replace"
        }
        mutate {
          convert => { "[flow][sampling_interval]" => "integer" }
        }
      }

      if [flow][sampling_interval] {
        if [network][bytes] and [flow][sampling_interval] > 0 {
          ruby {
            code => "event.set( '[network][bytes]', event.get('[network][bytes]').to_i * event.get('[flow][sampling_interval]').to_i )"
          }
        }
        if [network][packets] and [flow][sampling_interval] > 0 {
          ruby {
            code => "event.set( '[network][packets]', event.get('[network][packets]').to_i * event.get('[flow][sampling_interval]').to_i )"
          }
        }
      }
  }
}
